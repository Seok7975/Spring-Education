프레임워크의 사전적 의미는 뼈대 혹은 틀로서 이 의미를 소프트웨어 관점에서 접근하면 아키텍처에 해당하는 골격 코드다. 여기에서 핵심 단어는 '아키텍처'와 '골격 코드'다. 애플리케이션을 개발할 때, 가장 중요한 것이 전체 애플리케이션의 구조를 결정하는 아키텍처인데 이 아키텍처에 해당하는 골격 코드를 프레임워크가 제공한다. 

프레임워크의 장점
1. 빠른 구현 시간
2. 쉬운 관리
3. 개발자들의 역량 획일화
4. 검증된 아키텍처의 재사용과 일관성 유지

스프링 프레임워크는 로드 존손(Rod Johnson)이 2004년에 만든 오픈소스 프레임워크다.

POJO(Plain Old Java Object)란?
POJO란 말 그대로 평범한 옛날 자바 객체를 의미한다. POJO를 좀 더 쉽게 이해하기 위해서 반대로 POJO가 아닌 클래스가 무엇인지 이해하면 된다. 대표적인 Not POJO 클래스가 Sevlet 클래스이다. Servlet 클래스는 우리 마음대로 만들 수 없으며, 반드시 Servlet에서 요구하는 규칙에 맞게 클래스를 만들어야 실행할 수 있다.
다음은 Servlet 클래스 작성 규칙이다.

- javax.servlet.javax.servlet.http 패키지를 import 해야 한다.
- public 클래스로 선언되어야 한다.
- Servlet, GenricServlet, HttpServlet 중 하나를 상속해야 한다.
- 기본 생성자(Default Constructor)가 있어야 한다.
- 생명주기에 해당하는 메소드를 재정의(Overriding)한다.

스프링 프레임워크의 특징
스프링의 특징을 한 줄로 서술하면, "IoC와 AOP를 지원하는 경량의 컨테이너 프레임워크"로 표현할 수 있다.

1. 경량(Lightweight)

참고 : http://terms.naver.com/entry.nhn?docId=3532984&cid=58528&categoryId=58528&expCategoryId=58528 응집도, 결합도

우선 스프링은 크기 측면에서 가볍다. 스프링은 여러 개의 모듈로 구성되어 있으며, 각 모듈은 하나 이상의 JAR 파일로 구성되어 있다. 그리고 이 몇 개의 JAR 파일만 있으면 개발과 실행이 모두 가능하다. 따라서 스프링을 이용해서 만든 애플리케이션의 배포 역시 매우 빠르고 쉽다. 스프링을 경량이라고 하는 두 번째 이유는 스프링 프레임워크가 POJO(Plain Old Java Object) 형태의 객체를 관리하기 때문이다. POJO는 클래스를 구현하는 데 특별한 규칙이 없는 단순하고 가벼운 객체이다.

2. 제어의 역행(Inversion of Control)
우리가 비즈니스 컴포넌트를 개발할 때, 항상 신경 쓰는 것이 바로 낮은 결합도와 높은 응집도이다. 스프링은 제어의 역행(Inversion of Control, loc)을 통해 애플리케이션을 구성하는 객체 간의 느슨한 결합, 즉 낮은 결합도를 유지한다. 
다음은 Ioc가 적용되지 않은 상황과 IoC과 적용된 상황을 그림으로 표현한 것이다. IoC가 적용되기 전에는 애플리케이션 수행에 필요한 객체의 생성이나 객체와 객체 사이의 의존관계를 개발자가 직접 자바 코드로 처리했었다. 이런 상황에서는 의존관계에 있는 객체를 변경할 때, 반드시 자바 코드를 수정해야 한다.
하지만 IoC가 적용되면 객체 생성을 자바 코드로 직접 처리하는 것이 아니라 컨테이너가 대신 처리한다. 그리고 객체와 객체 사이의 의존관계 역시 컨테이너가 처리한다. 결과적으로 소스에 의존관계가 명시되지 않으므로 결합도가 떨어져서 유지보수가 편리해진다.

3. 관점지향 프로그래밍(Aspect Oriented Programming, AOP)

관점지향 프로그래밍은 비즈니스 메소드를 개발할 때, 핵심 비지니스 로직과 각 비즈니스 메소드마다 반복해서 등장하는 공통 로직을 분리함으로써 응집도가 높게 개발할 수 있도록 지원한다.

공통으로 사용하는 기능들을 외부의 독립된 클래스로 분리하고, 해당 기능을 프로그램 코드에 직접 명시하지 않고 선언적으로 처리하여 적용하는 것이 관점지향 프로그래밍의 기본 개념이다. 이렇게 되면 공통 기능을 분리하여 관리할 수 있으므로 응집도가 높은 비즈니스 컴포넌트를 만들 수 있을 뿐만 아니라 유지보수를 혁신적으로 향상시킬 수 있다.

4. 컨테이너(Container)
컨테이너는 특정 객체의 생성과 관리를 담당하며 객체 운용에 필요한 다양한 기능을 제공한다. 컨테이너는 일반적으로 서버 안에 포함되어 배포 및 구동된다. 대표적인 컨테이너로 Servlet 객체를 생성하고 관리하는 'Servlet 컨테이너'와  EJB 객체를 생성하고 관리하는 'EJB 컨테이너'가 있다. 그리고 Servlet 컨테이너는 우리가 사용하는 톰캣 서버에도 포함되어 있다. 애플리케이션 운용에 필요한 객체를 생성하고 객체 간의 의존관계를 관리한다는 점에서 스프링도 일종의 컨테이너라고 할 수 있다.

IoC(Inversion of Control) 컨테이너

HelloServlet.java

public class HelloServlet extends HttpServlet{
	public HelloServlet(){
		System.out.println("===========> HelloServlet 객체 생성");
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("doGet() 메소드 호출");
	}
}

/WEB-INF/web.xml

<web-app>
	<servlet>
		<servlet-name>hello</servlet-name>
		<servlet-class>hello.HelloServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>hello</servlet-name>
		<url-pattern>/hello.do</url-pattern>
	</servlet-mapping>
</web-app>

서블릿 컨테이너는 다음 순서에 따라 동작한다.

1. WEB-INF/web.xml 파일을 로딩하여 구동
2. 브라우저로부터 /hello.do 요청 수신
3. hello.HelloServlet 클래스를 찾아 객체를 생성하고 doGet() 메소드 호출
4. doGet() 메소드 실행 결과를 클라이언트 브라우저로 전송

이렇듯 컨테이너는 자신이 관리할 클래스들이 등록된 XML 설정 파일을 로딩하여 구동한다. 그리고 클라이언트의 요청이 들어오는 순간 XML 설정 파일을 참조하여 객체를 생성하고, 객체의 생명주기를 관리한다. 스프링 컨테이너 역시 서블릿 컨테이너와 유사하게 동작하므로 위에서 살펴본 요소들과 비슷한 요소들이 존재한다.
제어의 역행(IoC)은 결합도와 관련된 개념으로 이해할 수 있다. 기존에 자바 기반으로 애플리케이션을 개발할 때, 객체를 생성하고 객체들 사이의 의존관계를 처리하는 것에 대한 책임은 전적으로 개발자에게 있었다. 즉, 개발자가 어떤 객체를 생성할지 판단하고 객체 간의 의존관계 역시 소스코드로 표현해야 했다.
하지만 제어의 역행이라는 것은 이런 일련의 작업들을 소스코드로 처리하지 않고 컨테이너로 처리하는 것을 의미한다. 따라서 제어의 역행을 이용하면 소스에서 객체 생성과 의존관계에 대한 코드가 사라져 결과적으로 낮은 결합도의 컴포넌트를 구현할 수 있게 한다.
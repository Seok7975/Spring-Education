<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<context:component-scan base-package="com.springbook.biz"></context:component-scan>
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<context:property-placeholder location="classpath:config/database.properties"/>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
</beans>

<!-- 
	JdbcTemplate 클래스가 JDBC API를 이용하여 DB 연동을 처리하려면 반드시 데이터베이스로부터
	커넥션을 얻어야 한다. 따라서 JdbcTemplate 객체가 사용할 DataSource를 <bean> 등록하여
	스프링 컨테이너가 생성하도록 해야 한다.
	DataSource 인터페이스를 구현한 클래스는 다양하지만, 일반적으로 가장 많이 사용하는 Apache의
	BasicDataSource를 등록했다. BasicDataSource 객체는 연결에 필요한 프로퍼티(property)들을
	Setter 인젝션으로 설정해주면 된다. 그리고 BasicDataSource 객체가 삭제되기 전에 연결을
	해제하고자 close() 메소드를 destory-method 속성으로 지정했다.
	
	PropertyPlaceholderConfigurer를 이용하면 외부의 프로퍼티 파일을 참조하여 DataSource를
	설정할 수 있다. 실습을 위해 src/main/resoures 소스 폴더에 config 폴더를 생성하고
	config 폴더에 database.properties 파일을 적성한다.
	이제 Properties 파일에 설정된 프로퍼티들을 이용하여 DataSource를 설정하려면 
	<context:property-placeholder location="classpath:config/database.properties"/>
	엘리먼트를 사용한다.
	
	프로퍼티 파일을 사용하려면 <context:property-placeholder> 엘리먼트로 프로퍼티 파일의 위치를
	등록해야 한다. 그리고 "${}" 구문을 이용하여 프로퍼티 이름을 지정하면 프로퍼티 값으로 치환되어 실행된다.
 -->
비즈니스 컴포넌트 개발에서 가장 중요한 두 가지 원칙은 낮은 결합도와 높은 응집도를 유지하는 것이다. 스프링의 의존성 주입(Dependency Injection)을 이용하면 비즈니스 컴포넌트를 구성하는 객체들의 결합도를 떨어뜨릴 수 있어서 의존관계를 쉽게 변경할 수 있다. 스프링의 IoC가 결합도와 관련된 기능이라면, AOP(Aspect Oriented Programming)는 응집도와 관련된 기능이라 할 수 있다.

AOP를 이해하는 데에 가장 중요한 핵심 개념이 바로 관심 분리(Separation of Concerns)이다. AOP에서는 메소드마다 공통으로 등장하는 로깅이나 예외, 트랜잭션 처리 같은 코드들을 횡단 관심(Crosscutting Concerns)이라고 한다. 이에 반해 사용자의 요청에 따라 실제로 수행되는 핵심 비즈니스 로직을 핵심 관심(Core Concerns)이라고 한다.

주어진 소스코드를 보면 BoardServiceImpl 클래스와 LogAdvice 객체가 소스코드에서 강하게 결합되어 있어서, LogAdvice 클래스를 다른 클래스로 변경해야 하거나 공통 기능에 해당하는 printLog() 메소드의 시그니처가 변경되는 상황에서는 유연하게 대처할 수 없다.
기존에 사용하던 LogAdvice 클래스의 성능이 떨어져서 이를 대체할 Log4jAdvice 클래스를 만든다. 메소드 이름도 printLogging()으로 변경한다.
이제 BoardServiceImpl 클래스의 모든 메소드는 Log4jAdvice를 이용하도록 수정해야 한다.
결국, Advice 클래스가 LogAdvice에서 Log4jAdvice로 바뀌는 순간 BoardServiceImpl 클래스의 생성자를 수정해야 한다. 그리고 printLog()가 printLoggin() 메소드로 변경되었으므로 printLog()를 호출했던 모든 메소드를 수정해야 한다. 실행 결과를 확인해보면 수정 내용이 잘 반영된 것을 확인할 수 있다.
정리하면, OOP처럼 모듈화가 뛰어난 언어를 사용하여 개발하더라도 공통 모듈에 해당하는 Advice 클래스 객체를 생성하고 공통 메소드를 호출하는 코드가 비즈니스 메소드에 있다면, 핵심 관심(BoardServiceImpl)과 횡단 관심(LogAdvice)을 완벽하게 분리할 수는 없다. 하지만 스프링의 AOP는 이런 OOP의 한계를 극복할 수 있도록 도와준다.

BoardServiceClient의 main 메소드를 실행해본다.